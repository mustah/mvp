# === Global ===
image:
  name: gradle:jdk10

stages:
  - docker
  - prepare
  - build
  - assemble
  - pre-test
  - test
  - publish
  - deploy-staging
  - post-staging
  - deploy-prod
  - post-prod
  - finalize

variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.caching=true"
  SALTAPI_URL: "https://salt.elvaco.se:8000"
  SALTAPI_EAUTH: "pam"
  SALTAPI_USER: "saltapi"
  SALTAPI_PASS: "8J^SQvg&zR%rTd5YNuw"
  GITLAB_API_TOKEN: "J1Jb27mvUxZqAVx5MhhJ"
  DOCKER_REGISTRY_HOST: gitlab.elvaco.se:4567
  DOCKER_REGISTRY_URL: gitlab.elvaco.se:4567/elvaco/mvp

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle
  - export YARN_CACHE_FOLDER=`pwd`/.yarn

# === Templates ===
.no_cache: &no_cache
  cache:
    key: "$CI_COMMIT_REF_NAME-no_cache"

.cache_gradle: &cache_gradle
  cache:
    key: "$CI_COMMIT_REF_NAME-gradle"
    paths:
      - .gradle/
      - .yarn
      - frontend/dist
      - frontend/node_modules
      - .version

.cache_gradle_read_only: &cache_gradle_read_only
  <<: *cache_gradle
  cache:
    policy: pull

.deploy:autodeploy: &auto_deploy
  <<: *no_cache
  image: $DOCKER_REGISTRY_URL/ci-utils:latest

.acceptance_test: &acceptance_test
  <<: *cache_gradle_read_only
  services:
    - name: selenium/standalone-chrome
      alias: selenium_chrome_container_url
  artifacts:
    name: "${CI_COMMIT_REF_NAME}-cucumber"
    when: always
    paths:
      - acceptance_tests/target/cucumber
    expire_in: 2 days
  script:
    - gradle cucumber '-Pno-docker'

# === Jobs ===
docker:postgresql:
  <<: *no_cache
  stage: docker
  tags:
    - shell
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY_HOST
    - docker build -t $DOCKER_REGISTRY_URL/postgresql:latest -f docker/Dockerfile-postgresql .
    - docker push $DOCKER_REGISTRY_URL/postgresql:latest

docker:test-upgrade:
  <<: *no_cache
  stage: docker
  tags:
    - shell
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY_HOST
    - docker build -t $DOCKER_REGISTRY_URL/test-upgrade:latest -f docker/Dockerfile-test-upgrade .
    - docker push $DOCKER_REGISTRY_URL/test-upgrade:latest

docker:ci-utils:
  <<: *no_cache
  stage: docker
  tags:
    - shell
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY_HOST
    - docker build -t $DOCKER_REGISTRY_URL/ci-utils:latest -f docker/Dockerfile-ci-utils .
    - docker push $DOCKER_REGISTRY_URL/ci-utils:latest

prepare:gradle-clean:
  <<: *cache_gradle
  stage: prepare
  script:
    - gradle clean
  only:
    - schedules
    - master
    - develop
    - tags
    - /^release-.*$/

prepare:version:
  <<: *no_cache
  stage: prepare
  image:
    name: alpine/git:latest
    entrypoint: ["/bin/sh", "-c"]
  script:
    - git describe --tags --abbrev=7 --dirty > .version
    - chmod 644 .version
  artifacts:
    paths:
      - .version
    expire_in: 7 days

prepare:update-salt:
  <<: *no_cache
  image: $DOCKER_REGISTRY_URL/ci-utils:latest
  stage: prepare
  only:
    - schedules
    - /^release-.*$/
    - tags
  script:
    - pepper -G 'roles:salt-master' event.fire_master update salt/fileserver/gitfs/update

build:frontend:
  <<: *cache_gradle
  stage: build
  dependencies:
    - prepare:version
  script:
    - gradle frontend:bundle

build:compile:
  <<: *cache_gradle
  stage: build
  dependencies:
    - prepare:version
  script:
    - gradle compileJava checkstyle spotbugsMain test

assemble:
  <<: *cache_gradle
  stage: assemble
  dependencies:
    - prepare:version
  script:
    - gradle assemble
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-${CI_COMMIT_SHA:0:7}"
    paths:
      - backend/configuration/build/distributions/
      - backend/geoservice/build/distributions/
      - .version
    expire_in: 1 hour

pre-test:docker-mvp-app:
  variables:
    DOCKER_IMAGE_NAME: $DOCKER_REGISTRY_URL/mvp:${CI_COMMIT_REF_NAME}
  stage: pre-test
  tags:
    - shell
  dependencies:
    - assemble
    - prepare:version
  script:
    - docker build --build-arg MVP_APPVER=$(cat ./.version) -t ${DOCKER_IMAGE_NAME} -f docker/Dockerfile .
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY_HOST
    - docker push ${DOCKER_IMAGE_NAME}

pre-test:docker-geoservice-app:
  variables:
    DOCKER_IMAGE_NAME: $DOCKER_REGISTRY_URL/geoservice:${CI_COMMIT_REF_NAME}
  stage: pre-test
  tags:
    - shell
  dependencies:
    - assemble
    - prepare:version
  script:
    - docker build --build-arg GEOSERVICE_APPVER=$(cat ./.version) -t ${DOCKER_IMAGE_NAME} -f docker/Dockerfile-geoservice .
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY_HOST
    - docker push ${DOCKER_IMAGE_NAME}

test:system:
  <<: *cache_gradle_read_only
  stage: test
  services:
    - name: $DOCKER_REGISTRY_URL/postgresql:latest
      alias: pg_host
    - name: rabbitmq
      alias: rabbit_host
  script:
    - gradle systemTestCI
  artifacts:
    name: "${CI_COMMIT_REF_NAME}-system"
    when: on_failure
    paths:
      - backend/configuration/build/reports/tests/systemTestCI/*
    expire_in: 2 days

test:jira_script:
  <<: *no_cache
  image: frolvlad/alpine-python3
  stage: test
  before_script:
    - cd scripts/jira/
    - pip install -r requirements.txt
  script:
    - flake8
    - nose2 --with-coverage --verbose

test:integration:
  <<: *cache_gradle_read_only
  stage: test
  artifacts:
    name: "${CI_COMMIT_REF_NAME}-integration"
    when: on_failure
    paths:
      - backend/configuration/build/reports/tests/integrationTest/*
    expire_in: 2 days
  script:
    - gradle integrationTest

test:upgrade:
  <<: *no_cache
  image: $DOCKER_REGISTRY_URL/test-upgrade:latest
  variables:
    DOCKER_DRIVER: overlay2
    MVP_UPGRADE_FROM_TAG: production
    MVP_UPGRADE_TO_TAG: ${CI_COMMIT_REF_NAME}
    TEST_HOST: docker-host
  stage: test
  dependencies:
    - assemble
  before_script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY_HOST
  after_script:
    - docker-compose down -v
  services:
    - name: docker:dind
      alias: docker-host
  script:
    - ./scripts/upgrade-test.sh $MVP_UPGRADE_FROM_TAG $MVP_UPGRADE_TO_TAG $TEST_HOST

publish:mvp_artifactory:
  <<: *no_cache
  image: $DOCKER_REGISTRY_URL/ci-utils:latest
  stage: publish
  only:
    - schedules
    - /^release-.*$/
    - tags
  dependencies:
    - assemble
  script:
    - export ARTIFACTORY_URL=http://artifactory2.elvaco.local/artifactory/Elvaco/MVP
    - export MVP_ARTIFACT=$(find ./backend/configuration/build/distributions -name 'mvp*.tar')
    - export MVP_SHA1SUM=$(sha1sum $MVP_ARTIFACT|awk '{ print $1 }')
    - export MVP_MD5SUM=$(md5sum $MVP_ARTIFACT|awk '{ print $1 }')
    - curl -i -X PUT -u admin:password -T $MVP_ARTIFACT -H "X-Checksum-Sha1:$MVP_SHA1SUM" -H "X-Checksum-MD5:$MVP_MD5SUM" $ARTIFACTORY_URL/$(basename $MVP_ARTIFACT)

publish:geoservice_artifactory:
  <<: *no_cache
  image: $DOCKER_REGISTRY_URL/ci-utils:latest
  stage: publish
  only:
    - schedules
    - /^release-.*$/
    - tags
  dependencies:
    - assemble
  script:
    - export ARTIFACTORY_URL=http://artifactory2.elvaco.local/artifactory/Elvaco/MVP
    - export GEOSERVICE_ARTIFACT=$(find ./backend/geoservice/build/distributions/ -name 'geoservice*.tar')
    - export GEOSERVICE_SHA1SUM=$(sha1sum $GEOSERVICE_ARTIFACT|awk '{ print $1 }')
    - export GEOSERVICE_MD5SUM=$(md5sum $GEOSERVICE_ARTIFACT|awk '{ print $1 }')
    - curl -i -X PUT -u admin:password -T $GEOSERVICE_ARTIFACT -H "X-Checksum-Sha1:$GEOSERVICE_SHA1SUM" -H "X-Checksum-MD5:$GEOSERVICE_MD5SUM" $ARTIFACTORY_URL/$(basename $GEOSERVICE_ARTIFACT)

deploy:staging:
  <<: *auto_deploy
  stage: deploy-staging
  dependencies:
    - prepare:version
  only:
    - schedules
    - /^release-.*$/
    - tags
  environment:
    name: staging
    url: https://evo-staging.elvaco.se
  before_script:
    - test "$CI_COMMIT_REF_NAME" != "develop" && export SALTENV="saltenv=\"$CI_COMMIT_REF_NAME\""
    - export MVP_VERSION=$(cat .version)
  script:
    - pepper -C 'G@roles:mvp-app and G@env:mvp-staging' state.apply mvp.app.web $SALTENV
    - pepper -C 'G@roles:postgresql-server and G@env:mvp-staging' state.apply mvp.db.geoservice.create $SALTENV pillar="{\"mvp-branch\":\"$CI_COMMIT_REF_NAME\"}"
    - pepper -C 'G@roles:mvp-app and G@env:mvp-staging' state.apply mvp.app.geoservice.deploy $SALTENV pillar="{\"mvp-branch\":\"$CI_COMMIT_REF_NAME\", \"mvp_version\":\"$MVP_VERSION\"}"
    - pepper -C 'G@roles:postgresql-server and G@env:mvp-staging' state.apply mvp.db.mvp.create $SALTENV
    - pepper -C 'G@roles:mvp-app and G@env:mvp-staging' state.apply mvp.app.mvp.deploy $SALTENV pillar="{\"mvp-branch\":\"$CI_COMMIT_REF_NAME\", \"mvp_version\":\"$MVP_VERSION\"}"
    - pepper -C 'G@roles:mvp-app and G@env:mvp-staging' state.apply mvp.cleanup-obsoleted-config $SALTENV pillar="{\"mvp-branch\":\"$CI_COMMIT_REF_NAME\", \"mvp_version\":\"$MVP_VERSION\"}"

post-staging:acceptance:
  <<: *acceptance_test
  stage: post-staging
  only:
    - schedules
    - /^release-.*$/
    - tags
  variables:
    CHROME_URL: "http://selenium_chrome_container_url:4444/wd/hub"
    MVP_SERVER: "https://evo-staging.elvaco.se"
    MVP_WEB_PORT: 443
    MVP_API_PORT: 443
    MVP_ADMIN_PASSWORD: PmpQnaFaAFD0b867fyZoGFSyb32Z1BFr

deploy:production:
  <<: *auto_deploy
  stage: deploy-prod
  dependencies:
    - prepare:version
  only:
    - schedules
    - tags
  when: manual
  allow_failure: false #block the pipeline from continuing until we've deployed to prod
  environment:
    name: production
    url: https://evo.elvaco.se
  before_script:
    - test "$CI_COMMIT_REF_NAME" != "develop" && export SALTENV="saltenv=\"$CI_COMMIT_REF_NAME\""
    - export MVP_VERSION=$(cat .version)
  script:
    - pepper -C 'G@roles:mvp-app and G@env:mvp-prod' state.apply mvp.app.web $SALTENV
    - pepper -C 'G@roles:postgresql-server and G@env:mvp-prod' state.apply mvp.db.geoservice.create $SALTENV pillar="{\"mvp-branch\":\"$CI_COMMIT_REF_NAME\"}"
    - pepper -C 'G@roles:mvp-app and G@env:mvp-prod' state.apply mvp.app.geoservice.deploy $SALTENV pillar="{\"mvp-branch\":\"$CI_COMMIT_REF_NAME\", \"mvp_version\":\"$MVP_VERSION\"}"
    - pepper -C 'G@roles:postgresql-server and G@env:mvp-prod' state.apply mvp.db.mvp.create $SALTENV
    - pepper -C 'G@roles:mvp-app and G@env:mvp-prod' state.apply mvp.app.mvp.deploy $SALTENV pillar="{\"mvp-branch\":\"$CI_COMMIT_REF_NAME\", \"mvp_version\":\"$MVP_VERSION\"}"
    - pepper -C 'G@roles:mvp-app and G@env:mvp-prod' state.apply mvp.cleanup-obsoleted-config $SALTENV pillar="{\"mvp-branch\":\"$CI_COMMIT_REF_NAME\", \"mvp_version\":\"$MVP_VERSION\"}"

post-prod:acceptance:
  <<: *acceptance_test
  stage: post-prod
  only:
    - schedules
    - /^release-.*$/
    - tags
  variables:
    CHROME_URL: "http://selenium_chrome_container_url:4444/wd/hub"
    MVP_SERVER: "https://evo.elvaco.se"
    MVP_WEB_PORT: 443
    MVP_API_PORT: 443
    MVP_ADMIN_PASSWORD: PmpQnaFaAFD0b867fyZoGFSyb32Z1BFr

finalize:tag-production-mvp-docker:
  <<: *no_cache
  stage: finalize
  tags:
    - shell
  only:
    - schedules
    - tags
  before_script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY_HOST
  script:
    - docker pull ${DOCKER_REGISTRY_URL}/mvp:${CI_COMMIT_REF_NAME}
    - docker tag ${DOCKER_REGISTRY_URL}/mvp:${CI_COMMIT_REF_NAME} ${DOCKER_REGISTRY_URL}/mvp:production
    - docker push ${DOCKER_REGISTRY_URL}/mvp:production

finalize:create-jira-version:
  <<: *no_cache
  image: frolvlad/alpine-python3
  dependencies:
    - prepare:version
  stage: finalize
  only:
    - schedules
    - tags
  allow_failure: true
  variables:
     JIRA_USER: "app.jira.evo@elvaco.se"
     JIRA_TOKEN: "xR5ABiHwbEWrOiEY71BW9E99"
  before_script:
    - pip install -r scripts/jira/requirements.txt
  script:
    - python3 scripts/jira/fixversion.py --version $(cat .version) --jira_user $JIRA_USER --jira_token $JIRA_TOKEN

finalize:tag-production-geoservice-docker:
  <<: *no_cache
  stage: finalize
  tags:
    - shell
  only:
    - schedules
    - tags
  before_script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY_HOST
  script:
    - docker pull ${DOCKER_REGISTRY_URL}/geoservice:${CI_COMMIT_REF_NAME}
    - docker tag ${DOCKER_REGISTRY_URL}/geoservice:${CI_COMMIT_REF_NAME} ${DOCKER_REGISTRY_URL}/geoservice:production
    - docker push ${DOCKER_REGISTRY_URL}/geoservice:production
