image: sgrio/java-oracle:jdk_8

stages:
    - docker
    - build
    - deploy

variables:
    GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.caching=true"

before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - export YARN_CACHE_FOLDER=`pwd`/.yarn

postgresql:
    stage: docker
    tags:
      - shell
    script:
      - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN gitlab.elvaco.se:4567
      - docker build -t gitlab.elvaco.se:4567/elvaco/mvp/postgresql:latest -f Dockerfile-postgresql .
      - docker push gitlab.elvaco.se:4567/elvaco/mvp/postgresql:latest

build:
    stage: build
    cache:
        key: "$CI_COMMIT_REF_NAME"
        paths:
            - .gradle/wrapper
            - .gradle/caches
            - .yarn
    services:
        - name: gitlab.elvaco.se:4567/elvaco/mvp/postgresql:latest
          alias: pg_host
    script:
        - apt-get update && apt-get -y install git
        - ./gradlew dotVersion
        - ./gradlew clean build assemble
        - ./gradlew systemTestCI
    artifacts:
        name: "$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-${CI_COMMIT_SHA:0:7}"
        paths:
            - backend/configuration/build/distributions/
            - frontend/mockup
            - .version
        expire_in: 1 week

.review_app_job_template: &review_app
    stage: deploy
    variables:
      GIT_STRATEGY: none
      CONTAINER_NAME: review-mvp-$CI_COMMIT_REF_SLUG
    before_script:
        - echo "Removing review container $CONTAINER_NAME"
        - docker stop $CONTAINER_NAME || true
        - docker rm $CONTAINER_NAME || true
        - echo "Removing previously deployed directory app-root-$CI_COMMIT_REF_SLUG"
        - rm -rf app-root-$CI_COMMIT_REF_SLUG
    tags:
        - shell
    environment:
        name: review/$CI_COMMIT_REF_NAME
        url: http://rv-mvp-$CI_COMMIT_REF_SLUG.gitlab.elvaco.se
        on_stop: teardown_review
    script:
        - mkdir app-root-$CI_COMMIT_REF_SLUG
        - tar -C app-root-$CI_COMMIT_REF_SLUG -xf frontend/mockup/elvaco-mvp-mockup-`cat .version`.tar.gz
        - docker run -v $(pwd)/app-root-$CI_COMMIT_REF_SLUG/:/data/ -d -e VIRTUAL_HOST=rv-mvp-$CI_COMMIT_REF_SLUG.gitlab.elvaco.se --name $CONTAINER_NAME clue/json-server --routes routes.json --static . db.json
        - sleep 1
        - docker logs $CONTAINER_NAME
        - test $(docker inspect -f {{.State.Running}} $CONTAINER_NAME) = "true"
    dependencies:
      - build

deploy_protected:
  <<: *review_app
  only:
    - eon
    - develop
    - master

deploy_review:
  <<: *review_app
  when: manual
  only:
    - branches
  except:
    - eon
    - develop
    - master

teardown_review:
    stage: deploy
    variables:
      GIT_STRATEGY: none
      CONTAINER_NAME: review-mvp-$CI_COMMIT_REF_SLUG
    script:
      - echo "Removing review container $CONTAINER_NAME"
      - docker stop $CONTAINER_NAME || true
      - docker rm $CONTAINER_NAME || true
      - echo "Removing review app root"
      - rm -rf app-root-$CI_COMMIT_REF_SLUG
    when: manual
    environment:
        name: review/$CI_COMMIT_REF_NAME
        action: stop
    tags:
        - shell

deploy_staging:
    stage: deploy
    environment:
        name: staging
        url: http://elvsealiweb02.elvaco.local
    only:
        - develop
    before_script:
        - apt-get update -y && apt-get install git openssh-client -y
        - mkdir -p ~/.ssh
        - echo "$DOCKER_ROOT_SSH_PRIVATE" > ~/.ssh/id_rsa
        - chmod 0600 ~/.ssh/id_rsa
        - echo "$DOCKER_ROOT_SSH_PUBLIC" > ~/.ssh/id_rsa.pub
        - ssh-keygen -p -N '' -f ~/.ssh/id_rsa
        - echo -e "Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile /dev/null\n\n" > ~/.ssh/config
        - echo "Checking for a keystore stored in Gitlab"
        - test -n "$STAGING_KEYSTORE_BASE64"
        - echo "Checking for a keystore password stored in Gitlab"
        - test -n "$STAGING_KEYSTORE_PASSWORD_BASE64"
        - echo "Verifying certificate stored in Gitlab (note that the -passin argument is prefixed with 'pass:', so 'pass:the_real_password'):"
        - openssl pkcs12 -in <(base64 -d <(echo "$STAGING_KEYSTORE_BASE64")) -nodes -passin pass:$(base64 -d <(echo "$STAGING_KEYSTORE_PASSWORD_BASE64")) | openssl x509 -checkend 3600 -startdate -enddate
    script:
        - ./deploy/deploy_to_staging.sh $WEB_STAGING_SSH_USER $WEB_STAGING_SSH_HOST $STAGING_KEYSTORE_BASE64 $STAGING_KEYSTORE_PASSWORD_BASE64 $STAGING_KEYSTORE_ALIAS_BASE64
