def getVersion = { ->
  def stdout = new ByteArrayOutputStream()
  exec {
    commandLine 'git', 'describe', '--tags', '--abbrev=7', '--dirty'
    standardOutput = stdout
  }
  return stdout.toString().trim()
}

allprojects {
  version = getVersion()

  repositories {
    mavenCentral()
    jcenter()
  }
}

subprojects { subproject ->

  tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
  }

  plugins.withType(JavaPlugin) {

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    plugins.apply('idea')
    plugins.apply('eclipse')
    plugins.apply('checkstyle')
    plugins.apply('findbugs')

    idea {
      module {
        outputDir = file("$buildDir/classes/main")
        testOutputDir = file("$buildDir/classes/test")
        generatedSourceDirs += file("$buildDir/generated/")
        sourceDirs += file("$buildDir/generated/")
      }
    }

    checkstyle {
      ignoreFailures = false
      configFile = file("$rootDir/backend/config/checkstyle/checkstyle.xml")
      toolVersion = '8.5'
    }

    tasks.withType(FindBugs) {
      excludeFilter = file("$rootDir/backend/config/findbugs/excludeFilter.xml")
      reports {
        xml.enabled false
      }
    }
  }
}

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'cz.alenkacz.gradle:json-validator:1.0.0'
  }
}

apply plugin: 'json-validator'

jsonSchema {
  schemaFolder = 'docs/schema/'
}

task checkstyle {
  dependsOn subprojects.collect {it.tasks.withType(Checkstyle)}
}

task findbugs {
  dependsOn subprojects.collect {it.tasks.withType(FindBugs)}
}

task check {
  dependsOn([validateJsonSchema, ':backend:check', ':frontend:check'])
}

task dotVersion {
  def file = new File(".version")
  file.createNewFile()
  file.text = "$version"
}

task assemble(dependsOn: ':check')
