apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'io.spring.dependency-management'
apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin

import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.container.extras.DockerWaitHealthyContainer
import com.bmuschko.gradle.docker.tasks.image.DockerPullImage

applicationName = 'mvp'

dependencyManagement {
  imports {mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"}
}

docker {
  registryCredentials {
    url = 'gitlab.elvaco.se:4567'
    username = 'gitlab+deploy-token-1'
    password = 'VXFC8kiSQcJaLdyhdp-u'
  }
}

mainClassName = "com.elvaco.mvp.MvpApplication"

dependencies {
  compile project(':backend:core')
  compile project(':backend:database')
  compile project(':backend:web')
  compile project(':backend:rabbitmq-consumer')
  compile project(':backend:data-generator')
  compile project(':backend:unit-converter')

  compile 'org.springframework.boot:spring-boot-devtools'
  compile 'org.springframework.boot:spring-boot-starter-web'
  compile 'org.springframework.security:spring-security-web'
  compile 'org.springframework.security:spring-security-config'
  compile 'org.springframework.boot:spring-boot-starter-amqp'
  compile 'org.springframework:spring-jdbc'
  compile 'org.simpleflatmapper:sfm-csv:6.0.3'
  compile "org.ehcache:ehcache:${ehcacheVersion}"
  /* Deprecated & removed (http://openjdk.java.net/jeps/320) - used by hibernate */
  compile 'org.glassfish.jaxb:jaxb-runtime:2.3.0'
  compile 'javax.activation:javax.activation-api:1.2.0'
  compile "org.jooq:jooq:${jooqVersion}"
  compile 'org.liquibase:liquibase-core'

  compileOnly "org.projectlombok:lombok:${lombokVersion}"
  compileOnly "org.springframework.boot:spring-boot-configuration-processor"

  runtime 'com.h2database:h2'

  testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
  testCompile 'org.springframework.boot:spring-boot-starter-test'
  testCompile "org.assertj:assertj-core:${assertjVersion}"
  testCompile project(':backend:testing')
}

idea {
  module {
    testSourceDirs += file('src/integrationTest/java')
  }
}

ext {
  postgresDockerPort = "30991"
  rabbitDockerPort = "35672"
}

sourceSets {
  integrationTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }
}

task integrationTest(type: Test, dependsOn: 'test', group: 'verification') {
  testClassesDir = sourceSets.integrationTest.output.classesDir
  classpath = sourceSets.integrationTest.runtimeClasspath
}

task systemTestCI(type: Test, dependsOn: 'test', group: 'verification') {
  systemProperty "spring.liquibase.url", "jdbc:postgresql://pg_host:5432/mvp"
  systemProperty "spring.profiles.active", "postgresql"
  systemProperty "spring.datasource.url", "jdbc:postgresql://pg_host:5432/mvp"
  systemProperty "spring.datasource.username", "appuser"
  systemProperty "spring.datasource.password", "RWZ8tKUzDdbncg2J"
  systemProperty "spring.rabbitmq.host", "rabbit_host"
  systemProperty "spring.rabbitmq.username", "guest"
  systemProperty "spring.rabbitmq.password", "guest"
  testClassesDir = sourceSets.integrationTest.output.classesDir
  classpath = sourceSets.integrationTest.runtimeClasspath
}

task pullPostgresImage(type: DockerPullImage) {
  repository = 'gitlab.elvaco.se:4567/elvaco/mvp/postgresql'
  tag = 'latest'
}

task pullRabbitImage(type: DockerPullImage) {
  repository = 'gitlab.elvaco.se:4567/elvaco/mvp/rabbitmq'
  tag = 'latest'
}

task createPostgresContainer(type: DockerCreateContainer) {
  dependsOn pullPostgresImage
  targetImageId pullPostgresImage.getImageId()
  portBindings = ["${postgresDockerPort}:5432"]
  autoRemove = true
}

task createRabbitContainer(type: DockerCreateContainer) {
  dependsOn pullRabbitImage
  targetImageId pullRabbitImage.getImageId()
  portBindings = ["${rabbitDockerPort}:5672"]
  autoRemove = true
}

task startPostgresContainer(type: DockerStartContainer) {
  dependsOn createPostgresContainer
  targetContainerId createPostgresContainer.getContainerId()
}

task startRabbitContainer(type: DockerStartContainer) {
  dependsOn createRabbitContainer
  targetContainerId createRabbitContainer.getContainerId()
}

task startAndWaitOnHealthyPostgresContainer(type: DockerWaitHealthyContainer) {
  dependsOn startPostgresContainer
  timeout = 60
  targetContainerId createPostgresContainer.getContainerId()
}

task startAndWaitOnHealthyRabbitContainer(type: DockerWaitHealthyContainer) {
  dependsOn startRabbitContainer
  timeout = 60
  targetContainerId createRabbitContainer.getContainerId()
}

task stopPostgresContainer(type: DockerStopContainer) {
  targetContainerId createPostgresContainer.getContainerId()
}

task stopRabbitContainer(type: DockerStopContainer) {
  targetContainerId createRabbitContainer.getContainerId()
}

task systemTest(type: Test,
                dependsOn: ['test', startAndWaitOnHealthyPostgresContainer, startAndWaitOnHealthyRabbitContainer],
                group: 'verification') {
  systemProperty "spring.profiles.active", "postgresql"
  def dbUrl = "jdbc:postgresql://localhost:${postgresDockerPort}/mvp"
  systemProperty "spring.liquibase.url", dbUrl
  systemProperty "spring.datasource.url", dbUrl
  systemProperty "spring.rabbitmq.host", "localhost"
  systemProperty "spring.rabbitmq.port", rabbitDockerPort
  testClassesDir = sourceSets.integrationTest.output.classesDir
  classpath = sourceSets.integrationTest.runtimeClasspath
  finalizedBy stopPostgresContainer
  finalizedBy stopRabbitContainer
}

configurations {
  integrationTestCompile.extendsFrom(testCompile, testCompileOnly)
  integrationTestRuntime.extendsFrom testRuntime
}

distributions {
  main {
    baseName = 'mvp'
    contents {
      exclude '**/spring-boot-devtools*.jar'
    }
  }
}

// by default, we get both a tar and a zip; but we are satisfied with only a tar
distZip.enabled = false

jar {
  baseName = 'mvp'
  from('../../frontend/dist') {
    into 'static'
  }
}
jar.dependsOn(':frontend:bundle')
check.dependsOn([integrationTest, systemTest])
