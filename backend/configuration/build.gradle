apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'io.spring.dependency-management'

applicationName = 'mvp'

dependencyManagement {
  imports { mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}" }
}

mainClassName = "com.elvaco.mvp.MvpApplication"

dependencies {
  compile project(':backend:core')
  compile project(':backend:database')
  compile project(':backend:web')
  compile project(':backend:rabbitmq-consumer')

  compile 'org.springframework.boot:spring-boot-devtools'
  compile 'org.springframework.cloud:spring-cloud-starter-zuul:1.4.0.RELEASE'
  compile 'org.springframework.security:spring-security-web'
  compile 'org.springframework.security:spring-security-config'
  compile 'org.springframework.boot:spring-boot-starter-amqp'
  compile 'org.simpleflatmapper:sfm-csv:3.15.5'
  compile 'org.ehcache:ehcache:3.4.0'

  compileOnly 'org.projectlombok:lombok:1.16.18'

  runtime 'org.liquibase:liquibase-core'
  runtime 'com.h2database:h2'

  testCompile 'org.springframework.boot:spring-boot-starter-test'
  testCompile project(':backend:testing')
}

sourceSets {
  integrationTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }
}

task integrationTest(type: Test, dependsOn: 'test', group: 'verification') {
  testClassesDir = sourceSets.integrationTest.output.classesDir
  classpath = sourceSets.integrationTest.runtimeClasspath
}

task systemTestCI(type: Test, dependsOn: 'test', group: 'verification') {
  systemProperty "spring.profiles.active", "postgresql"
  systemProperty "spring.datasource.url", "jdbc:postgresql://pg_host:5432/mvp"
  systemProperty "spring.datasource.username", "mvp"
  systemProperty "spring.datasource.password", "mvp"
  systemProperty "spring.rabbitmq.host", "rabbit_host"
  systemProperty "spring.rabbitmq.username", "guest"
  systemProperty "spring.rabbitmq.password", "guest"
  testClassesDir = sourceSets.integrationTest.output.classesDir
  classpath = sourceSets.integrationTest.runtimeClasspath
}

task systemTest(type: Test, dependsOn: 'test', group: 'verification') {
  doFirst {
    exec {
      executable "docker-compose"
      args "up", "-d", "postgresql", "rabbitmq"
    }
  }
  systemProperty "spring.profiles.active", "postgresql"
  testClassesDir = sourceSets.integrationTest.output.classesDir
  classpath = sourceSets.integrationTest.runtimeClasspath
}

task cleanUpDockerServices {
  onlyIf {
    final def doCleanup = System.getenv('MVP_SYSTEM_TEST_DO_CLEANUP');
    return doCleanup == null || !doCleanup.equalsIgnoreCase('false');
  }
  doLast {
    exec {
      executable "docker-compose"
      args "down", "-v"
    }
  }
}
systemTest.finalizedBy cleanUpDockerServices

configurations {
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
}

distributions {
  main {
    baseName = 'mvp'
    contents {
      exclude '**/spring-boot-devtools*.jar'
    }
  }
}

// by default, we get both a tar and a zip; but we are satisfied with only a tar
distZip.enabled = false

jar {
  baseName = 'mvp'
  from('../../frontend/dist') {
    into 'static'
  }
}
jar.dependsOn(':frontend:bundle')
check.dependsOn([integrationTest, systemTest])
