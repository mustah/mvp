package com.elvaco.mvp.api;

import java.util.Optional;

import com.elvaco.mvp.dto.ErrorMessageDto;

import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import static org.springframework.core.annotation.AnnotatedElementUtils.findMergedAnnotation;

@Slf4j
@ControllerAdvice
public class ApiExceptionHandler {

  /**
   * Handler for REST API exceptions.
   *
   * @param exception The exception to handle
   *
   * @return A {@link ResponseEntity} containing the {@link ErrorMessageDto} generated by the
   *   raised exception
   */
  @ExceptionHandler
  @ResponseBody
  public ResponseEntity<ErrorMessageDto> handle(Exception exception) {
    log.warn("Exception occurred while processing request", exception);
    HttpStatus responseHttpStatus = resolveHttpStatus(exception);
    ErrorMessageDto dto = new ErrorMessageDto(exception.getMessage(), responseHttpStatus.value());
    return new ResponseEntity<>(dto, responseHttpStatus);
  }

  private HttpStatus resolveHttpStatus(Exception exception) {
    if (exception instanceof AccessDeniedException) {
      return HttpStatus.FORBIDDEN;
    } else {
      return Optional.ofNullable(findMergedAnnotation(exception.getClass(), ResponseStatus.class))
        .map(ResponseStatus::value)
        .orElse(HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }
}
