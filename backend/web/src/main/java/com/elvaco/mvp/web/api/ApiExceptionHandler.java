package com.elvaco.mvp.web.api;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.elvaco.mvp.core.exception.EmailAddressAlreadyExists;
import com.elvaco.mvp.core.exception.InvalidQuantityForMeterType;
import com.elvaco.mvp.core.exception.InvalidUserSelection;
import com.elvaco.mvp.core.exception.NoPhysicalMeters;
import com.elvaco.mvp.core.exception.PredicateConstructionFailure;
import com.elvaco.mvp.core.exception.Unauthorized;
import com.elvaco.mvp.core.exception.UnitConversionError;
import com.elvaco.mvp.core.exception.UpstreamServiceUnavailable;
import com.elvaco.mvp.web.dto.ErrorMessageDto;
import com.elvaco.mvp.web.exception.MissingParameter;
import lombok.extern.slf4j.Slf4j;
import org.springframework.dao.InvalidDataAccessApiUsageException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.web.bind.MissingServletRequestParameterException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;

import static org.springframework.core.annotation.AnnotatedElementUtils.findMergedAnnotation;

@Slf4j
@ControllerAdvice
public class ApiExceptionHandler {

  static final Pattern STRIP_AFTER_SEMI_COLON = Pattern.compile("([^;]+);");
  static final String INTERNAL_ERROR_MESSAGE = "Internal server error, please contact support.";

  private static final ApiExceptionInformation INTERNAL_SERVER_ERROR =
    new ApiExceptionInformation(
      new ErrorMessageDto(INTERNAL_ERROR_MESSAGE, HttpStatus.INTERNAL_SERVER_ERROR.value()),
      HttpStatus.INTERNAL_SERVER_ERROR
    );

  private static final Map<String, String> TYPE_TO_HUMAN_TYPE_MAP = new HashMap<>();

  static {
    TYPE_TO_HUMAN_TYPE_MAP.put("java.time.ZonedDateTime", "timestamp");
    TYPE_TO_HUMAN_TYPE_MAP.put("java.util.UUID", "ID");
    TYPE_TO_HUMAN_TYPE_MAP.put("java.util.List", "list");
  }

  /**
   * Handler for REST API exceptions.
   *
   * @param exception The exception to handle
   *
   * @return A {@link ResponseEntity} containing the {@link ErrorMessageDto} generated by the
   *   raised exception
   */
  @ExceptionHandler
  @ResponseBody
  public ResponseEntity<ErrorMessageDto> handle(Exception exception) {
    return handleGeneralException(exception);
  }

  @ExceptionHandler(IOException.class)
  @ResponseBody
  public ResponseEntity<ErrorMessageDto> handle(IOException exception) {
    if (exception.getClass().getSimpleName().equals("ClientAbortException")) {
      log.info(
        "Ignoring '{}' caused by '{}'",
        exception.getClass().getName(),
        exception.getCause().getMessage()
      );
      log.debug("Exception occurred while processing request", exception);
      return null;
    } else {
      return handleGeneralException(exception);
    }
  }

  @ExceptionHandler(Unauthorized.class)
  @ResponseBody
  public ResponseEntity<ErrorMessageDto> handle(Unauthorized exception) {
    log.info("Unauthorized", exception);
    return forbidden(exception);
  }

  @ExceptionHandler(AccessDeniedException.class)
  @ResponseBody
  public ResponseEntity<ErrorMessageDto> handle(AccessDeniedException exception) {
    log.info("Access denied", exception);
    return forbidden(exception);
  }

  @ExceptionHandler(MissingServletRequestParameterException.class)
  public ResponseEntity<ErrorMessageDto> handle(MissingServletRequestParameterException exception) {
    String message = String.format("Missing '%s' parameter.", exception.getParameterName());
    return badRequest(message);
  }

  @ExceptionHandler(MethodArgumentTypeMismatchException.class)
  public ResponseEntity<ErrorMessageDto> handle(MethodArgumentTypeMismatchException exception) {
    Object value = exception.getValue();
    Class<?> requiredType = exception.getRequiredType();
    String humanTypeName = humanTypeName(requiredType);
    String message = String.format(
      "Invalid '%s' %s: '%s'.",
      exception.getName(),
      humanTypeName,
      value
    );
    return badRequest(message);
  }

  /**
   * Thrown for example when we try to map strings to UUID in the JPA layer,
   * and Spring's AOP wraps the exception.
   */
  @ExceptionHandler(InvalidDataAccessApiUsageException.class)
  public ResponseEntity<ErrorMessageDto> handle(InvalidDataAccessApiUsageException exception) {
    Matcher matcher = STRIP_AFTER_SEMI_COLON.matcher(exception.getMessage());
    return badRequest(matcher.find() ? matcher.group(1) : exception.getMessage());
  }

  @ExceptionHandler(PredicateConstructionFailure.class)
  public ResponseEntity<ErrorMessageDto> handle(PredicateConstructionFailure exception) {
    return badRequest(exception);
  }

  @ExceptionHandler(UnitConversionError.class)
  public ResponseEntity<ErrorMessageDto> handle(UnitConversionError exception) {
    return badRequest(exception);
  }

  @ExceptionHandler(InvalidQuantityForMeterType.class)
  public ResponseEntity<ErrorMessageDto> handle(InvalidQuantityForMeterType exception) {
    return badRequest(exception);
  }

  @ExceptionHandler(EmailAddressAlreadyExists.class)
  public ResponseEntity<ErrorMessageDto> handle(EmailAddressAlreadyExists exception) {
    return forbidden(exception);
  }

  @ExceptionHandler(NoPhysicalMeters.class)
  public ResponseEntity<ErrorMessageDto> handle(NoPhysicalMeters exception) {
    return notFound(exception);
  }

  @ExceptionHandler(UpstreamServiceUnavailable.class)
  public ResponseEntity<ErrorMessageDto> handle(UpstreamServiceUnavailable exception) {
    ErrorMessageDto dto = new ErrorMessageDto(
      exception.getMessage(),
      HttpStatus.GATEWAY_TIMEOUT.value()
    );
    return new ResponseEntity<>(dto, HttpStatus.SERVICE_UNAVAILABLE);
  }

  @ExceptionHandler(InvalidUserSelection.class)
  public ResponseEntity<ErrorMessageDto> handle(InvalidUserSelection exception) {
    ErrorMessageDto dto = new ErrorMessageDto(
      "Invalid configuration of sub-organisation, please contact support",
      HttpStatus.FORBIDDEN.value()
    );
    log.warn("Forbidden", exception);
    return new ResponseEntity<>(dto, HttpStatus.FORBIDDEN);
  }

  @ExceptionHandler(MissingParameter.class)
  public ResponseEntity<ErrorMessageDto> handle(MissingParameter exception) {
    return badRequest(exception);
  }

  private ResponseEntity<ErrorMessageDto> handleGeneralException(Exception exception) {
    log.warn("Exception occurred while processing request", exception);
    ApiExceptionInformation exceptionInformation = resolveHttpStatus(exception);
    return new ResponseEntity<>(exceptionInformation.dto, exceptionInformation.status);
  }

  private static ApiExceptionInformation resolveHttpStatus(Exception exception) {
    return Optional.ofNullable(findMergedAnnotation(exception.getClass(), ResponseStatus.class))
      .map(responseStatus ->
        new ApiExceptionInformation(
          new ErrorMessageDto(exception.getMessage(), responseStatus.value().value()),
          responseStatus.value()
        ))
      .orElse(INTERNAL_SERVER_ERROR);
  }

  private static String humanTypeName(Class<?> javaType) {
    if (javaType == null) {
      return "parameter";
    }
    return TYPE_TO_HUMAN_TYPE_MAP.getOrDefault(javaType.getName(), "parameter");
  }

  private static ResponseEntity<ErrorMessageDto> badRequest(Exception e) {
    return badRequest(e.getMessage());
  }

  private static ResponseEntity<ErrorMessageDto> badRequest(String message) {
    return httpError(message, HttpStatus.BAD_REQUEST);
  }

  private static ResponseEntity<ErrorMessageDto> forbidden(Exception exception) {
    return httpError(exception.getMessage(), HttpStatus.FORBIDDEN);
  }

  private static ResponseEntity<ErrorMessageDto> notFound(Exception exception) {
    return httpError(exception.getMessage(), HttpStatus.NOT_FOUND);
  }

  private static ResponseEntity<ErrorMessageDto> httpError(String message, HttpStatus status) {
    ErrorMessageDto dto = new ErrorMessageDto(message, status.value());
    return new ResponseEntity<>(dto, status);
  }

  private static class ApiExceptionInformation {

    private final ErrorMessageDto dto;
    private final HttpStatus status;

    private ApiExceptionInformation(ErrorMessageDto dto, HttpStatus status) {
      this.dto = dto;
      this.status = status;
    }
  }
}
