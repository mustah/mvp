buildscript {
  ext {
    springBootVersion = '1.5.6.RELEASE'
  }
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
  }
}

repositories {
  mavenCentral()
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'application'

applicationName = 'mvp'
sourceCompatibility = 1.8
targetCompatibility = 1.8

/**
 * The bootRepackage task creates a fat jar of the project and, by default,
 * excludes devtools if it exists. However, it depends on the distTar & distZip
 * tasks which are provided by the 'distribution' plugin (which is, in turn,
 * applied implicitly by the 'application' plugin). This means that we can't
 * make use of the artifact produced by distTar directly and have that include
 * the fatjar. This is supposedly fixed in Spring Boot 2.0.0M1 Instead, we need
 * the fatjar (and startscripts), or disable bootRepackage altogether and
 * manually exclude devtools.
 *
 * The latter feels less intrusive and less involved, so let's go with that.
 *
 * See: https://github.com/spring-projects/spring-boot/issues/2679,
 * https://github.com/spring-projects/spring-boot/issues/2622
 *
 * This is supposedly fixed in Spring Boot 2.0.0M1:
 * https://github.com/spring-projects/spring-boot/issues/5861
 */
bootRepackage.enabled = false
distributions {
  main {
    baseName = 'mvp'
    contents {
      exclude '**/spring-boot-devtools*.jar'
    }
  }
}
dependencies {
  compile('org.springframework.boot:spring-boot-starter-data-jpa')
  compile('org.springframework.boot:spring-boot-starter-jdbc')
  compile("org.springframework.boot:spring-boot-starter-actuator")
  compile("org.springframework.boot:spring-boot-starter-security")
  compile('org.springframework.boot:spring-boot-starter-web')
  compile("org.springframework.security:spring-security-acl")
  compile("org.springframework.boot:spring-boot-devtools")
  compile("org.modelmapper:modelmapper:1.1.0")
  compile('org.postgresql:postgresql')

  compileOnly('org.projectlombok:lombok:1.16.18')

  runtime('org.liquibase:liquibase-core')
  runtime('com.h2database:h2')

  testCompile('org.springframework.boot:spring-boot-starter-test')
  testCompile('org.assertj:assertj-core:3.8.0')
}

jar {
  baseName = 'mvp'
  from('../frontend/dist') {
    into 'static'
  }
}

configurations {
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
}

sourceSets {
  integrationTest {
  java {
    compileClasspath += main.output + test.output
    runtimeClasspath += main.output + test.output
    srcDir file('src/integrationTest/java')
  }
  resources.srcDir file('src/integrationTest/resources')
  }
}

task integrationTest(type: Test, dependsOn: 'test', group: 'verification') {
  testClassesDir = sourceSets.integrationTest.output.classesDir
  classpath = sourceSets.integrationTest.runtimeClasspath
}

check.dependsOn integrationTest

jar.dependsOn(':frontend:assemble')
